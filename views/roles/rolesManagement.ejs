<div class="card h-100 p-0 radius-12">
    <div class="card-header border-bottom bg-base py-16 px-24 d-flex align-items-center flex-wrap gap-3 justify-content-between">
        <div class="d-flex align-items-center flex-wrap gap-3">
            <span class="text-md fw-medium text-secondary-light mb-0">Show</span>
            <select class="form-select form-select-sm w-auto ps-12 py-6 radius-12 h-40-px">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
                <option>6</option>
                <option>7</option>
                <option>8</option>
                <option>9</option>
                <option>10</option>
            </select>
            <form class="navbar-search">
                <input type="text" class="bg-base h-40-px w-auto" name="search" placeholder="Search">
                <iconify-icon icon="ion:search-outline" class="icon"></iconify-icon>
            </form>
            <!-- <select class="form-select form-select-sm w-auto ps-12 py-6 radius-12 h-40-px">
                <option>Status</option>
                <option>Active</option>
                <option>Inactive</option>
            </select> -->
        </div>
        <a href="/roles/add-roles" class="btn btn-primary text-sm btn-sm px-12 py-12 radius-8 d-flex align-items-center gap-2">
            <iconify-icon icon="ic:baseline-plus" class="icon text-xl line-height-1"></iconify-icon>
            Create New User
        </a>
    </div>
    <div class="card-body p-24">
        <div class="table-responsive scroll-sm">
            <table class="table bordered-table sm-table mb-0">
                <thead>
                    <tr>
                        <th scope="col">Sr No.</th>
                        <th scope="col">Name</th>
                        <th scope="col">Email</th>
                        <th scope="col" class="text-center">Status</th>
                        <th scope="col" class="text-center">Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Debug: Users count = <%= typeof users !== 'undefined' && users ? users.length : 'undefined' %> -->
                    <% if (typeof users !== 'undefined' && users && users.length > 0) { %>
                        <% users.forEach((user, index) => { %>
                            <tr class="<%= user.isActive ? '' : 'table-danger' %>">
                                <td><%= String(index + 1).padStart(2, '0') %></td>
                                <td class="title-table">
                                    <div>
                                        <strong><%= user.fullName %></strong>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <strong><%= user.email %></strong>
                                        <br>
                                        <small class="text-muted">
                                            Created: <%= new Date(user.createdAt).toLocaleDateString() %>
                                        </small>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <% if (user.isActive) { %>
                                        <span class="badge bg-success-100 text-success-600 px-3 py-2 rounded-pill">
                                            <i class="ri-check-line me-1"></i> Active
                                        </span>
                                    <% } else { %>
                                        <span class="badge bg-danger-100 text-danger-600 px-3 py-2 rounded-pill">
                                            <i class="ri-close-line me-1"></i> Inactive
                                        </span>
                                    <% } %>
                                </td>
                                <td class="text-center">
                                    <div class="d-flex align-items-center gap-10 justify-content-center">
                                        <button type="button" class="toggle-status-btn bg-info-focus bg-hover-info-200 text-info-600 fw-medium w-40-px h-40-px d-flex justify-content-center align-items-center rounded-circle" 
                                                data-user-id="<%= user._id %>" 
                                                data-user-name="<%= user.fullName %>" 
                                                data-current-status="<%= user.isActive %>" 
                                                title="<%= user.isActive ? 'Deactivate User' : 'Activate User' %>">
                                            <% if (user.isActive) { %>
                                                <iconify-icon icon="mdi:eye-off" class="icon text-xl"></iconify-icon>
                                            <% } else { %>
                                                <iconify-icon icon="mdi:eye" class="icon text-xl"></iconify-icon>
                                            <% } %>
                                        </button>
                                        <button type="button" class="edit-user-btn bg-success-focus text-success-600 bg-hover-success-200 fw-medium w-40-px h-40-px d-flex justify-content-center align-items-center rounded-circle" data-user-id="<%= user._id %>" title="Edit User">
                                            <iconify-icon icon="lucide:edit" class="menu-icon"></iconify-icon>
                                        </button>
                                        <button type="button" class="delete-user-btn bg-danger-focus bg-hover-danger-200 text-danger-600 fw-medium w-40-px h-40-px d-flex justify-content-center align-items-center rounded-circle" data-user-id="<%= user._id %>" data-user-name="<%= user.fullName %>" title="Delete User">
                                            <iconify-icon icon="fluent:delete-24-regular" class="menu-icon"></iconify-icon>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" class="text-center py-4">
                                <div class="text-muted">
                                    <iconify-icon icon="mdi:account-off" class="text-4xl mb-2"></iconify-icon>
                                    <p>No users found. <a href="/roles/add-roles">Create your first user</a></p>
                                </div>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mt-24">
            <span>
                <% if (typeof users !== 'undefined' && users && users.length > 0) { %>
                    Showing 1 to <%= users.length %> of <%= users.length %> entries
                <% } else { %>
                    No entries found
                <% } %>
            </span>
            <ul class="pagination d-flex flex-wrap align-items-center gap-2 justify-content-center">
                <li class="page-item">
                    <a class="page-link bg-neutral-300 text-secondary-light fw-semibold radius-8 border-0 d-flex align-items-center justify-content-center h-32-px w-32-px text-md" href="javascript:void(0)">
                        <iconify-icon icon="ep:d-arrow-left" class=""></iconify-icon>
                    </a>
                </li>
                <li class="page-item">
                    <a class="page-link text-secondary-light fw-semibold radius-8 border-0 d-flex align-items-center justify-content-center h-32-px w-32-px text-md bg-primary-600 text-white" href="javascript:void(0)">1</a>
                </li>
                <li class="page-item">
                    <a class="page-link bg-neutral-300 text-secondary-light fw-semibold radius-8 border-0 d-flex align-items-center justify-content-center h-32-px w-32-px" href="javascript:void(0)">2</a>
                </li>
                <li class="page-item">
                    <a class="page-link bg-neutral-300 text-secondary-light fw-semibold radius-8 border-0 d-flex align-items-center justify-content-center h-32-px w-32-px text-md" href="javascript:void(0)">3</a>
                </li>
                <li class="page-item">
                    <a class="page-link bg-neutral-300 text-secondary-light fw-semibold radius-8 border-0 d-flex align-items-center justify-content-center h-32-px w-32-px text-md" href="javascript:void(0)">4</a>
                </li>
                <li class="page-item">
                    <a class="page-link bg-neutral-300 text-secondary-light fw-semibold radius-8 border-0 d-flex align-items-center justify-content-center h-32-px w-32-px text-md" href="javascript:void(0)">5</a>
                </li>
                <li class="page-item">
                    <a class="page-link bg-neutral-300 text-secondary-light fw-semibold radius-8 border-0 d-flex align-items-center justify-content-center h-32-px w-32-px text-md" href="javascript:void(0)">
                        <iconify-icon icon="ep:d-arrow-right" class=""></iconify-icon>
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>
<!-- view button modal -->
<div class="modal fade" id="edit-role-popup" tabindex="-1" aria-labelledby="adsModalLabel" aria-hidden="true">
  <div class="modal-dialog preview-ad-modal" style="max-width: 500px;">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="adsModalLabel">Edit Roles</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="card">
            <div class="">
                <div class="row gy-3">
                    <div class="col-md-12">
                        <label class="form-label">Name</label>
                        <input type="text" name="role_name" class="form-control" placeholder="Enter Role Name" value="Blog User">
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Permission</label>
                        <select class="form-select">
                            <option value="0">Select Permission</option>
                            <option value="1">Role List</option>
                            <option value="2">Role Create</option>
                            <option value="3">Role Edit</option>
                            <option value="4">Role Delete</option>
                        </select>
                    </div>


                    <div class="col-12">
                        <button type="submit" class="btn btn-primary-600">Submit</button>
                    </div>
                </div>
            </div>
        </div>

      </div>
      <!-- <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div> -->
    </div>
  </div>
</div>

<% script = `
<!-- SweetAlert2 CSS and JS -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>

<script>
    // Professional toast function using SweetAlert2
    function showToast(message, type) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        });

        let icon = 'info';
        if (type === 'success') icon = 'success';
        else if (type === 'error') icon = 'error';
        else if (type === 'warning') icon = 'warning';

        Toast.fire({
            icon: icon,
            title: message
        });
    }

    // Toggle User Status Button (Blue - First Button)
    $(document).on('click', '.toggle-status-btn', function () {
        const userId = $(this).data('user-id');
        const userName = $(this).data('user-name');
        const currentStatus = $(this).data('current-status') === 'true';
        const newStatus = !currentStatus;
        const actionText = newStatus ? 'activate' : 'deactivate';
        const button = $(this);
        const row = button.closest('tr');
        
        console.log('Toggle Status:', {
            userId: userId,
            userName: userName,
            currentStatus: currentStatus,
            newStatus: newStatus,
            actionText: actionText
        });
        
        // Professional SweetAlert2 confirmation
        Swal.fire({
            title: actionText.charAt(0).toUpperCase() + actionText.slice(1) + ' User?',
            text: 'Are you sure you want to ' + actionText + ' "' + userName + '"?',
            icon: newStatus ? 'question' : 'warning',
            showCancelButton: true,
            confirmButtonColor: newStatus ? '#28a745' : '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, ' + actionText + '!',
            cancelButtonText: 'Cancel',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
            // Show minimal loading state
            button.prop('disabled', true);
            const originalHtml = button.html();
            button.html('<div class="spinner-border spinner-border-sm" role="status"></div>');
            
            // Make API call to toggle status
            fetch('/api/users/' + userId + '/toggle-status', {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Show success message
                    showToast('User "' + userName + '" ' + actionText + 'd successfully!', 'success');
                    
                    // Update the button and status badge
                    const statusBadge = row.find('td:nth-child(4) span');
                    const buttonIcon = button.find('iconify-icon');
                    
                    if (newStatus) {
                        // User is now active
                        statusBadge.removeClass('bg-danger-100 text-danger-600').addClass('bg-success-100 text-success-600');
                        statusBadge.html('<i class="ri-check-line me-1"></i> Active');
                        buttonIcon.attr('icon', 'mdi:eye-off');
                        button.attr('title', 'Deactivate User');
                        row.removeClass('table-danger');
                    } else {
                        // User is now inactive
                        statusBadge.removeClass('bg-success-100 text-success-600').addClass('bg-danger-100 text-danger-600');
                        statusBadge.html('<i class="ri-close-line me-1"></i> Inactive');
                        buttonIcon.attr('icon', 'mdi:eye');
                        button.attr('title', 'Activate User');
                        row.addClass('table-danger');
                    }
                    
                    // Update data attribute and restore button quickly
                    button.data('current-status', newStatus);
                    button.prop('disabled', false);
                    button.html(originalHtml);
                } else {
                    showToast('Failed to update user status: ' + (result.message || 'Unknown error'), 'error');
                    // Reset button quickly
                    button.prop('disabled', false);
                    button.html(originalHtml);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while updating user status', 'error');
                // Reset button quickly
                button.prop('disabled', false);
                button.html(originalHtml);
            });
            }
        });
    });

    // Edit User Button (Green - Second Button)
    $(document).on('click', '.edit-user-btn', function () {
        const userId = $(this).data('user-id');
        // Direct redirect to edit page
        window.location.href = '/users/edit/' + userId;
    });

    // Delete User Button (Red - Third Button)
    $(document).on('click', '.delete-user-btn', function () {
        const userId = $(this).data('user-id');
        const userName = $(this).data('user-name');
        const row = $(this).closest('tr');
        
        // Professional SweetAlert2 confirmation for delete
        Swal.fire({
            title: 'Delete User?',
            text: 'Are you sure you want to delete "' + userName + '"? This action cannot be undone!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel',
            reverseButtons: true,
            focusCancel: true
        }).then((result) => {
            if (result.isConfirmed) {
            // Show minimal loading state
            const deleteButton = $(this);
            deleteButton.prop('disabled', true);
            const originalDeleteHtml = deleteButton.html();
            deleteButton.html('<div class="spinner-border spinner-border-sm" role="status"></div>');
            
            // Make API call to delete user
            fetch('/api/users/' + userId, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Show success message
                    showToast('User "' + userName + '" deleted successfully!', 'success');
                    // Remove row from table
                    row.fadeOut(500, function() {
                        $(this).remove();
                        updateRowNumbers();
                    });
                } else {
                    showToast('Failed to delete user: ' + (result.message || 'Unknown error'), 'error');
                    // Reset button quickly
                    deleteButton.prop('disabled', false);
                    deleteButton.html(originalDeleteHtml);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while deleting the user', 'error');
                // Reset button quickly
                deleteButton.prop('disabled', false);
                deleteButton.html(originalDeleteHtml);
            });
            }
        });
    });

    // Update row numbers after deletion
    function updateRowNumbers() {
        $('tbody tr').each(function(index) {
            $(this).find('td:first').text(String(index + 1).padStart(2, '0'));
        });
    }

    // Toast notification function
    function showToast(message, type = 'info') {
        // Remove any existing toasts first
        $('.custom-toast').remove();
        
        // Create toast element
        const toast = $('<div>').addClass('alert position-fixed shadow-lg custom-toast');
        const alertType = type === 'error' ? 'alert-danger' : type === 'success' ? 'alert-success' : 'alert-info';
        toast.addClass(alertType);
        toast.css({
            'top': '80px',
            'right': '20px',
            'z-index': '999999',
            'min-width': '400px',
            'max-width': '600px',
            'border-radius': '12px',
            'font-size': '16px',
            'padding': '20px',
            'border': '2px solid'
        });
        
        // Set border color based on type
        if (type === 'success') {
            toast.css({
                'border-color': '#28a745',
                'background-color': '#d4edda',
                'color': '#155724'
            });
        } else if (type === 'error') {
            toast.css({
                'border-color': '#dc3545',
                'background-color': '#f8d7da',
                'color': '#721c24'
            });
        }
        
        const iconEmoji = type === 'error' ? '❌' : type === 'success' ? '✅' : 'ℹ️';
        const closeBtn = $('<button>').attr({
            'type': 'button',
            'style': 'background: none; border: none; font-size: 20px; cursor: pointer; margin-left: 10px;'
        }).html('×').on('click', function() {
            $(this).closest('.custom-toast').remove();
        });
        
        const content = $('<div>').addClass('d-flex align-items-center')
            .append($('<span>').css({'font-size': '24px', 'margin-right': '12px'}).html(iconEmoji))
            .append($('<span>').css({'font-weight': '600', 'flex-grow': '1'}).html(message))
            .append(closeBtn);
        
        toast.append(content);
        
        $('body').append(toast);
        
        // Add entrance animation
        toast.css('transform', 'translateX(100%)');
        setTimeout(() => {
            toast.css({
                'transform': 'translateX(0)',
                'transition': 'transform 0.3s ease-out'
            });
        }, 10);
        
        // Auto remove after duration based on type
        const duration = type === 'success' ? 4000 : 6000;
        setTimeout(() => {
            toast.css('transform', 'translateX(100%)');
            setTimeout(() => toast.remove(), 300);
        }, duration);
    }
</script>
` %>
