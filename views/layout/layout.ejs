<!-- meta tags and other links -->
<!DOCTYPE html>
<html lang="en" data-theme="light">
  <%- include('../partials/head') %>
  <body>
  <%- include('../partials/sidebar') %>

    <main class="dashboard-main">
      <%- include('../partials/navbar') %>

        <div class="dashboard-main-body">
            <%- include('../partials/breadcrumb'), {title:title, subTitle:subTitle} %> 

            <%- body %>
        </div>

      <%- include('../partials/footer') %>
    </main>

    <!-- Change Password Modal -->
    <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="changePasswordForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <div class="position-relative">
                                <input type="password" class="form-control" id="newPassword" name="newPassword" required minlength="8">
                                <button type="button" class="btn btn-link position-absolute end-0 top-50 translate-middle-y pe-3" onclick="togglePassword('newPassword')" style="border: none; background: none; z-index: 10;">
                                    <iconify-icon icon="solar:eye-linear" class="text-secondary" id="newPasswordEye"></iconify-icon>
                                </button>
                            </div>
                            <div class="form-text">Password must be at least 8 characters long.</div>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <div class="position-relative">
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                                <button type="button" class="btn btn-link position-absolute end-0 top-50 translate-middle-y pe-3" onclick="togglePassword('confirmPassword')" style="border: none; background: none; z-index: 10;">
                                    <iconify-icon icon="solar:eye-linear" class="text-secondary" id="confirmPasswordEye"></iconify-icon>
                                </button>
                            </div>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="changePasswordSubmit">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            Change Password
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <%- include('../partials/scripts') %> 

    <!-- Change Password Script -->
    <script>
        // Password toggle function
        function togglePassword(fieldId) {
            const field = document.getElementById(fieldId);
            const eyeIcon = document.getElementById(fieldId + 'Eye');
            
            if (field.type === 'password') {
                field.type = 'text';
                eyeIcon.setAttribute('icon', 'solar:eye-closed-linear');
            } else {
                field.type = 'password';
                eyeIcon.setAttribute('icon', 'solar:eye-linear');
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const changePasswordBtn = document.getElementById('changePasswordBtn');
            const changePasswordForm = document.getElementById('changePasswordForm');
            const submitBtn = document.getElementById('changePasswordSubmit');
            let changePasswordModal;

            // Initialize modal
            const modalElement = document.getElementById('changePasswordModal');
            if (modalElement) {
                changePasswordModal = new bootstrap.Modal(modalElement);
            }

            // Open modal when change password is clicked
            if (changePasswordBtn) {
                changePasswordBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (changePasswordModal) {
                        changePasswordModal.show();
                    }
                });
            }

            // Handle form submission
            if (changePasswordForm) {
                changePasswordForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    // Clear previous errors
                    clearFormErrors();
                    
                    const formData = new FormData(this);
                    const data = {
                        newPassword: formData.get('newPassword'),
                        confirmPassword: formData.get('confirmPassword')
                    };
                    
                    // Client-side validation
                    if (!data.newPassword) {
                        showFieldError('newPassword', 'New password is required');
                        return;
                    }
                    
                    if (data.newPassword.length < 8) {
                        showFieldError('newPassword', 'Password must be at least 8 characters long');
                        return;
                    }
                    
                    if (data.newPassword !== data.confirmPassword) {
                        showFieldError('confirmPassword', 'Passwords do not match');
                        return;
                    }
                    
                    // Show loading state
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        const spinner = submitBtn.querySelector('.spinner-border');
                        if (spinner) {
                            spinner.classList.remove('d-none');
                        }
                    }
                    
                    try {
                        console.log('Sending change password request...');
                        const response = await fetch('/api/auth/change-password', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data)
                        });
                        
                        console.log('Response status:', response.status);
                        const result = await response.json();
                        console.log('Response data:', result);
                        
                        if (result.success) {
                            // Show success message
                            showToast('success', result.message || 'Password changed successfully');
                            
                            // Reset form and close modal
                            changePasswordForm.reset();
                            if (changePasswordModal) {
                                changePasswordModal.hide();
                            }
                        } else {
                            // Show error message
                            showToast('error', result.message || 'Failed to change password');
                        }
                    } catch (error) {
                        console.error('Fetch error:', error);
                        showToast('error', 'Network error: Unable to connect to server');
                    } finally {
                        // Hide loading state
                        if (submitBtn) {
                            submitBtn.disabled = false;
                            const spinner = submitBtn.querySelector('.spinner-border');
                            if (spinner) {
                                spinner.classList.add('d-none');
                            }
                        }
                    }
                });
            }

            function clearFormErrors() {
                if (!changePasswordForm) return;
                
                const inputs = changePasswordForm.querySelectorAll('.form-control');
                inputs.forEach(input => {
                    input.classList.remove('is-invalid');
                    const parent = input.closest('.mb-3');
                    if (parent) {
                        const feedback = parent.querySelector('.invalid-feedback');
                        if (feedback) {
                            feedback.textContent = '';
                        }
                    }
                });
            }

            function showFieldError(fieldName, message) {
                const field = document.getElementById(fieldName);
                if (field) {
                    field.classList.add('is-invalid');
                    const parent = field.closest('.mb-3');
                    if (parent) {
                        const feedback = parent.querySelector('.invalid-feedback');
                        if (feedback) {
                            feedback.textContent = message;
                        }
                    }
                }
            }

            function showToast(type, message) {
                // Create toast element
                const toastHtml = `
                    <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;
                
                // Create toast container if it doesn't exist
                let toastContainer = document.querySelector('.toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                    toastContainer.style.zIndex = '9999';
                    document.body.appendChild(toastContainer);
                }
                
                // Add toast to container
                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                
                // Show toast
                const toastElement = toastContainer.lastElementChild;
                if (toastElement && typeof bootstrap !== 'undefined' && bootstrap.Toast) {
                    const toast = new bootstrap.Toast(toastElement);
                    toast.show();
                    
                    // Remove toast element after it's hidden
                    toastElement.addEventListener('hidden.bs.toast', function() {
                        toastElement.remove();
                    });
                } else {
                    // Fallback: show alert if Bootstrap toast is not available
                    alert(message);
                    toastElement.remove();
                }
            }
        });
    </script>

   <!-- Add the script block here -->
   <% if (typeof script !== 'undefined') { %>
    <%- script %>
  <% } %>
  </body>
</html>
